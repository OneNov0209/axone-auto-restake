#!/bin/bash

# ======================
# CONFIGURATION
# ======================
CONFIG_FILE="$HOME/.axone_autostake.conf"

# Load configuration from external file if exists
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
else
    # Fallback to inline configuration
    VALOPER="your_valoper_address_here"
    WALLET="wallet"
    CHAIN_ID="axone-1"
    DENOM="uaxone"
    FEE="500uaxone"
    KEYRING="--keyring-backend test"
    BOT_TOKEN="your_bot_token_here"
    CHAT_ID="your_chat_id_here"
    EXPLORER_URL="https://explorer.onenov.xyz/axone-mainnet/tx"
    MIN_BALANCE=1000000  # 1 AXONE (in uaxone)
    GAS_ADJUSTMENT=1.4
fi

# ======================
# DEPENDENCY CHECK
# ======================
check_dependencies() {
    for cmd in axoned jq curl bc; do
        if ! command -v "$cmd" &> /dev/null; then
            echo "‚ùå Error: Required command '$cmd' not found"
            send_telegram "‚ùå *[Axone AutoStake]*\nMissing dependency: $cmd"
            exit 1
        fi
    done
}

# ======================
# TELEGRAM NOTIFICATION
# ======================
send_telegram() {
    local MESSAGE=$1
    curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
        -d chat_id="$CHAT_ID" \
        -d text="$MESSAGE" \
        -d parse_mode="Markdown" \
        -d disable_web_page_preview="true"
}

# ======================
# TRANSACTION VERIFICATION
# ======================
verify_tx() {
    local txhash=$1
    local attempts=0
    local max_attempts=6
    local delay=10

    while [ $attempts -lt $max_attempts ]; do
        local tx_status=$(axoned query tx "$txhash" --chain-id "$CHAIN_ID" --output json 2>/dev/null | jq -r '.code')
        
        if [ "$tx_status" == "0" ]; then
            return 0
        elif [ "$tx_status" != "null" ]; then
            return 1
        fi
        
        sleep $delay
        ((attempts++))
    done
    
    return 1
}

# ======================
# MAIN PROCESS
# ======================
main() {
    # Initialize
    echo "üöÄ [$(date)] Starting Axone AutoStake Process"
    send_telegram "üöÄ *[Axone AutoStake]*\nStarting withdraw & re-stake process...\n‚è∞ Time: $(date -u +'%Y-%m-%d %H:%M UTC')"
    
    check_dependencies

    # Get wallet address
    ADDRESS=$(axoned keys show "$WALLET" $KEYRING -a)
    if [ -z "$ADDRESS" ]; then
        send_telegram "‚ùå *[Axone AutoStake]*\nFailed to get wallet address"
        exit 1
    fi

    # ======================
    # WITHDRAW REWARDS
    # ======================
    echo "üí∏ Withdrawing rewards..."
    WITHDRAW_OUTPUT=$(axoned tx distribution withdraw-rewards "$VALOPER" \
        --from "$WALLET" \
        --commission \
        --chain-id "$CHAIN_ID" \
        --gas auto \
        --gas-adjustment "$GAS_ADJUSTMENT" \
        --fees "$FEE" \
        $KEYRING \
        -y 2>&1)
    
    TXHASH_WITHDRAW=$(echo "$WITHDRAW_OUTPUT" | grep -oE '[A-F0-9]{64}' | head -n1)
    
    if [ -z "$TXHASH_WITHDRAW" ]; then
        send_telegram "‚ùå *[Axone AutoStake]*\nWithdraw failed:\n\`$(echo "$WITHDRAW_OUTPUT" | grep -i 'error\|fail')\`"
        exit 1
    fi
    
    echo "‚è≥ Waiting for withdraw to complete (TX: $TXHASH_WITHDRAW)"
    if ! verify_tx "$TXHASH_WITHDRAW"; then
        send_telegram "‚ùå *[Axone AutoStake]*\nWithdraw TX failed:\nüîó [$TXHASH_WITHDRAW]($EXPLORER_URL/$TXHASH_WITHDRAW)"
        exit 1
    fi

    # ======================
    # CHECK BALANCE
    # ======================
    sleep 5  # Additional delay for balance update
    BALANCE=$(axoned query bank balances "$ADDRESS" --denom "$DENOM" --output json | jq -r '.amount? // 0')
    
    if [ "$BALANCE" -le "$MIN_BALANCE" ]; then
        AXONE_BALANCE=$(echo "scale=4; $BALANCE/1000000" | bc -l | sed 's/^\./0./')
        send_telegram "‚ö†Ô∏è *[Axone AutoStake]*\nInsufficient balance for re-stake.\nRemaining: \`$AXONE_BALANCE AXONE\` (min 1 AXONE required)"
        exit 0  # Exit gracefully as this isn't a failure
    fi

    # ======================
    # CALCULATE AMOUNT
    # ======================
    DELEGATE_AMOUNT=$((BALANCE - MIN_BALANCE))
    AXONE_AMOUNT=$(echo "scale=4; $DELEGATE_AMOUNT/1000000" | bc -l | sed 's/^\./0./')

    # ======================
    # DELEGATE
    # ======================
    echo "üîÑ Delegating $AXONE_AMOUNT AXONE..."
    DELEGATE_OUTPUT=$(axoned tx staking delegate "$VALOPER" "${DELEGATE_AMOUNT}${DENOM}" \
        --from "$WALLET" \
        --chain-id "$CHAIN_ID" \
        --gas auto \
        --gas-adjustment "$GAS_ADJUSTMENT" \
        --fees "$FEE" \
        $KEYRING \
        -y 2>&1)
    
    TXHASH_DELEGATE=$(echo "$DELEGATE_OUTPUT" | grep -oE '[A-F0-9]{64}' | head -n1)
    
    if [ -z "$TXHASH_DELEGATE" ]; then
        send_telegram "‚ùå *[Axone AutoStake]*\nDelegation failed:\n\`$(echo "$DELEGATE_OUTPUT" | grep -i 'error\|fail')\`"
        exit 1
    fi
    
    echo "‚è≥ Waiting for delegation to complete (TX: $TXHASH_DELEGATE)"
    if ! verify_tx "$TXHASH_DELEGATE"; then
        send_telegram "‚ùå *[Axone AutoStake]*\nDelegation TX failed:\nüîó [$TXHASH_DELEGATE]($EXPLORER_URL/$TXHASH_DELEGATE)"
        exit 1
    fi

    # ======================
    # FINAL NOTIFICATION
    # ======================
    TIME=$(date -u +"%Y-%m-%d %H:%M UTC")
    send_telegram "‚úÖ *[Axone AutoStake]*\n\n‚úÖ *Withdraw* successful\nüîó [TX Hash]($EXPLORER_URL/$TXHASH_WITHDRAW)\n\n‚úÖ *Re-Stake* successful\nüí∞ Amount: \`$AXONE_AMOUNT AXONE\`\nüîó [TX Hash]($EXPLORER_URL/$TXHASH_DELEGATE)\n\n‚è∞ Date: $TIME\n‚úÖ Status: *Success*"
    
    echo "üéâ [$(date)] AutoStake completed successfully"
}

# Execute main function
main
